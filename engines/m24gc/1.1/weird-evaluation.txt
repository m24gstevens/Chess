#include "defs.h"
#include "data.h"
#include "protos.h"

// Piece values
int piece_values_mg[6] = {20000, 94, 320, 325, 480, 950};
int piece_values_eg[6] = {20000, 110, 290, 330, 510, 900};

// Penalties and bonuses for positional factors
int doubled_pawn_penalty[2] = {12,20};
int isolated_pawn_penalty[2] = {15,10};
int backward_pawn_penalty[2] = {13, 8};
// [phase][side][rank]
int passed_pawn_bonus[2][2][8] = {{{0, 10, 20, 30, 40, 50, 60, 70},{70, 60, 50, 40, 30, 20, 10, 0}},
{{0, 55, 65, 70, 75, 80, 85, 90},{90, 85, 80, 75, 70, 65, 55, 0}}};
int rook_seventh_bonus[2] = {25, 15};
int rook_open_file_bonus[2] = {25, 15};
int rook_semi_open_bonus[2] = {12, 16};
int UNDEVELOPED_PIECE_PENALTY = 7;
int NO_PAWNS_PENALTY = 150;
int PASSED_PAWN_BONUS = 20;

// Piece-Square tables for positional evaluation
// Pawns [phase][side][square]
int pawn_pstable[2][2][64] = 
{{{0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, -10, -30, -30, 0, 0, 0,
3, 3, 8, -15, -15, -8, 3, 3, 5,
 5, 10, 15, 15, -5, -10, -8,
8, 8, 13, 20, 20, 10, 5, 5,
 10, 10, 18, 25, 25, 12, 6, 6,
13, 18, 20, 30, 30, 20, 18, 13,
 0, 0, 0, 0, 0, 0, 0, 0}, 
{0, 0, 0, 0, 0, 0, 0, 0,
13, 18, 20, 30, 30, 20, 18, 13,
10, 10, 18, 25, 25, 12, 6, 6,
 8, 8, 13, 20, 20, 10, 5, 5,
5, 5, 10, 15, 15, -5, -10, -8,
 3, 3, 8, -15, -15, -8, 3, 3,
0, 0, -10, -30, -30, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0}},
{{0, 0, 0, 0, 0, 0, 0, 0,
 10, 8, 8, 10, 10, 8, 8, 10,
5, 2, 0, 0, 0, 0, 2, 5,
 10, 8, 0, -4, 4, 0, 8, 10,
20, 15, 8, 4, 4, 8, 15, 20,
 35, 35, 20, 17, 17, 20, 35, 35,
60, 60, 50, 45, 45, 50, 60, 60,
 0, 0, 0, 0, 0, 0, 0, 0}, 
{0, 0, 0, 0, 0, 0, 0, 0,
 60, 60, 50, 45, 45, 50, 60, 60,
35, 35, 20, 17, 17, 20, 35, 35,
 20, 15, 8, 4, 4, 8, 15, 20,
10, 8, 0, -4, 4, 0, 8, 10,
 5, 2, 0, 0, 0, 0, 2, 5,
 10, 8, 8, 10, 10, 8, 8, 10,
  0, 0, 0, 0, 0, 0, 0, 0}}};

// King [phase][side][square]
int king_pstable[2][2][64] = 
{{{0, 20, 40, -15, 0, -15, 40, 20, -10,-10, -20, -30, -30, -20, -10, -10,
-40, -40, -40, -50, -50, -40, -40, -40, -40, -40, -40, -50, -50, -40, -40, -40,
-40, -40, -40, -50, -50, -40, -40, -40, -40, -40, -40, -50, -50, -40, -40, -40,
-40, -40, -40, -50, -50, -40, -40, -40, -40, -40, -40, -50, -50, -40, -40, -40},
{-40, -40, -40, -50, -50, -40, -40, -40, -40, -40, -40, -50, -50, -40, -40, -40,
-40, -40, -40, -50, -50, -40, -40, -40, -40, -40, -40, -50, -50, -40, -40, -40,
-40, -40, -40, -50, -50, -40, -40, -40, -40, -40, -40, -50, -50, -40, -40, -40,
-10,-10, -20, -30, -30, -20, -10, -10, 0, 20, 40, -15, 0, -15, 40, 20}},
{{-30, -15, 0, 15, 15, 0, -15, -30, -15, 0, 15, 30, 30, 15, 0, -15,
0, 15, 30, 45, 45, 30, 15, 0, 15, 30, 45, 60, 60, 45, 30, 15,
15, 30, 45, 60, 60, 45, 30, 15, 0, 15, 30, 45, 45, 30, 15, 0,
-15, 0, 15, 30, 30, 15, 0, -15, -30, -15, 0, 15, 15, 0, -15, -30},
{-30, -15, 0, 15, 15, 0, -15, -30, -15, 0, 15, 30, 30, 15, 0, -15,
0, 15, 30, 45, 45, 30, 15, 0, 15, 30, 45, 60, 60, 45, 30, 15,
15, 30, 45, 60, 60, 45, 30, 15, 0, 15, 30, 45, 45, 30, 15, 0,
-15, 0, 15, 30, 30, 15, 0, -15, -30, -15, 0, 15, 15, 0, -15, -30}}};

int knight_pstable[2][2][64] = {
{{-30,-12,-10, -8, -8, -10, -12, -30,
-10, -8, -3, 0, 0, -3, -8, -10,
-7, -2, 8, 8, 8, 8, -2, -7,
-5, 8, 10, 13, 13, 10, 8, -5,
-5, 10, 13, 18, 18, 13, 10, -5,
-7, 5, 8, 15, 15, 8, 5, -7,
-7, 3, 6, 10, 10, 6, 3, -7,
-40,-20,-15, -12, -12, -15, -20, -40},
{-40,-20,-15, -12, -12, -15, -20, -40,
-7, 3, 6, 10, 10, 6, 3, -7,
-7, 5, 8, 15, 15, 8, 5, -7,
-5, 10, 13, 18, 18, 13, 10, -5,
-5, 8, 10, 13, 13, 10, 8, -5,
-7, -2, 8, 8, 8, 8, -2, -7,
-10, -8, -3, 0, 0, -3, -8, -10,
-30,-12,-10, -8, -8, -10, -12, -30}},
{{-30,-12,-10, -8, -8, -10, -12, -30,
-10, -8, -3, 0, 0, -3, -8, -10,
-7, -2, 8, 8, 8, 8, -2, -7,
-5, 8, 10, 13, 13, 10, 8, -5,
-5, 10, 13, 18, 18, 13, 10, -5,
-7, 5, 8, 15, 15, 8, 5, -7,
-7, 3, 6, 10, 10, 6, 3, -7,
-40,-20,-15, -12, -12, -15, -20, -40},
{-40,-20,-15, -12, -12, -15, -20, -40,
-7, 3, 6, 10, 10, 6, 3, -7,
-7, 5, 8, 15, 15, 8, 5, -7,
-5, 10, 13, 18, 18, 13, 10, -5,
-5, 8, 10, 13, 13, 10, 8, -5,
-7, -2, 8, 8, 8, 8, -2, -7,
-10, -8, -3, 0, 0, -3, -8, -10,
-30,-12,-10, -8, -8, -10, -12, -30}}
};

int bishop_pstable[2][2][64] = {
{{-15, -15, -15, -15, -15, -15, -15, -15,
0, 4, 4, 4, 4, 4, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 4, 4, 4, 4, 4, 0,
0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0,
0, 4, 4, 4, 4, 4, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 4, 4, 4, 4, 4, 0,
-15, -15, -15, -15, -15, -15, -15, -15}},
{{-15, -15, -15, -15, -15, -15, -15, -15,
0, 4, 4, 4, 4, 4, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 4, 4, 4, 4, 4, 0,
0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0,
0, 4, 4, 4, 4, 4, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 12, 12, 8, 4, 0,
0, 4, 8, 8, 8, 8, 4, 0,
0, 4, 4, 4, 4, 4, 4, 0,
-15, -15, -15, -15, -15, -15, -15, -15}}
};

int queen_pstable[2][2][64] = {
{{0,0,0,0,0,0,0,0,
0, 0, 2, 2, 2, 2, 0, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 0, 2, 2, 2, 2, 0, 0,
0,0,0,0,0,0,0,0}, 
{0,0,0,0,0,0,0,0,
0, 0, 2, 2, 2, 2, 0, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 0, 2, 2, 2, 2, 0, 0,
0,0,0,0,0,0,0,0}}, 
{{0,0,0,0,0,0,0,0,
0, 0, 2, 2, 2, 2, 0, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 0, 2, 2, 2, 2, 0, 0,
0,0,0,0,0,0,0,0}, 
{0,0,0,0,0,0,0,0,
0, 0, 2, 2, 2, 2, 0, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 3, 3, 3, 3, 2, 0,
0, 2, 2, 3, 3, 2, 2, 0,
0, 0, 2, 2, 2, 2, 0, 0,
0,0,0,0,0,0,0,0}}};

// Constants for evaluation
static const U64 firstRank = C64(0xFF);
static const U64 lastRank = C64(0xFF00000000000000);
static const U64 secondRank = C64(0xFF00);
static const U64 seventhRank = C64(0xFF000000000000);
static const U64 queenside = C64(0x0707070707070707);
static const U64 kingside = C64(0xE0E0E0E0E0E0E0E0);
static const U64 centre = C64(0x1818181818181818);
static const U64 white_half = C64(0xFFFFFFFF);
static const U64 secondSeventh = C64(0xFF00000000FF00);
static const U64 thirdSixth = C64(0xFF0000FF0000);
static const U64 fourthFifth = C64(0xFFFF000000);

// Mobility bonuses
int bishop_mobility_bonus[2] = {5, 4};
int rook_mobility_bonus[2] = {2, 1};

// Bitboard routines for evaluation
static inline U64 northFill(U64 bb) {
    bb |= (bb << 8);
    bb |= (bb << 16);
    bb |= (bb << 32);
    return bb;
}
static inline U64 southFill(U64 bb) {
    bb |= (bb >> 8);
    bb |= (bb >> 16);
    bb |= (bb >> 32);
    return bb;
}
U64 fileFill(U64 bb) {
    return northFill(bb) | southFill(bb);
}

// Tables for the evaluation
// frontSpan[side][square]
U64 pawnSpan[2][64];
U64 besideFileMasks[64];
U64 fileMasks[64];

void init_evaluation_masks() {
    int i;
    U64 bb, pawn;
    for (int i=0; i<64; i++) {
        pawn = (U64)1 << i;
        bb = northFill(pawn) & ~pawn;
        bb |= westOne(bb) | eastOne(bb);
        pawnSpan[0][i] = bb;
        bb = southFill(pawn) & ~pawn;
        bb |= westOne(bb) | eastOne(bb);
        pawnSpan[1][i] = bb;
        fileMasks[i] = fileFill(pawn);
        besideFileMasks[i] = westOne(fileMasks[i]) | eastOne(fileMasks[i]);
    }
}

static inline int count_isolated_pawns(U64 pawn_mask) {
    U64 open = ~fileFill(pawn_mask);
    pawn_mask &= eastOne(open);
    pawn_mask &= westOne(open);
    return popcount(pawn_mask);
}

static inline int count_doubled_pawns(U64 pawn_mask) {
    U64 mask = northOne(northFill(pawn_mask)) & southFill(pawn_mask);
    return popcount(mask);
}

static inline U64 white_passed_pawns(U64 wpawns, U64 bpawns) {
    U64 black_pawn_spans = southOne(southFill(bpawns));
    black_pawn_spans |= eastOne(black_pawn_spans) | westOne(black_pawn_spans);
    return wpawns & ~black_pawn_spans;
}

static inline U64 black_passed_pawns(U64 wpawns, U64 bpawns) {
    U64 white_pawn_spans = northOne(northFill(wpawns));
    white_pawn_spans |= eastOne(white_pawn_spans) | westOne(white_pawn_spans);
    return bpawns & ~white_pawn_spans;
}

static inline int count_white_backward_pawns(U64 wpawns) {
    U64 backfills = southOne(southFill(wpawns));
    U64 mask = westOne(backfills) | eastOne(backfills);
    wpawns &= mask;
    return popcount(wpawns); 
}

static inline int count_black_backward_pawns(U64 bpawns) {
    U64 backfills = northOne(northFill(bpawns));
    U64 mask = westOne(backfills) | eastOne(backfills);
    bpawns &= mask;
    return popcount(bpawns); 
}

int eval_king(int side, int opponent_phase, U64 open_files, U64 semiopen_files) {
    int score = 0;
    U64 king_bb = bitboards[K + 6*side];
    int king_square = bitscanForward(king_bb);
    U64 pawn_bb = bitboards[P + 6*side];
    U64 our_side = side ? ~white_half : white_half;
    pawn_bb &= our_side;
    int open_file_multiplier = 2;
    if (king_bb & eastOne(kingside)) {
        // Only g and h files, i.e. castled kingside
        score += 15 * popcount(pawn_bb & secondSeventh);
        score += 6 * popcount(pawn_bb & thirdSixth);
        score += (-90 + 30 * popcount(pawn_bb));
    } else if (king_bb & queenside) {
        score += 15 * popcount(pawn_bb & secondSeventh);
        score += 6 * popcount(pawn_bb & thirdSixth);
        score += (-90 + 30 * popcount(pawn_bb));
    } else {
        // Penalty for open files near the king
        open_file_multiplier = 3;
    }
    if (fileMasks[king_square] & open_files)
        score -= 15 * open_file_multiplier;
    else if (fileMasks[king_square] & semiopen_files)
        score -= 8 * open_file_multiplier;
    score *= opponent_phase;
    score /= 31;
    return score + king_pstable[MG][side][king_square];
}

// Evaluate the current position. If the position is good for the side to move, returns a + score
int eval(int alpha, int beta) {
    // Lazy evaluation based on piece material. If the material score (simple) would put us outside the alpha beta bounds by >600, we return that bound
    /*int lazy_score = side_to_move ? -material_count : material_count;
    if (lazy_score + 600 < alpha)
        return alpha;
    if (lazy_score - 600 > beta)
        return beta; */
        

    int white_phase = 0;
    int black_phase = 0;
    int eval_mg = 0;
    int eval_eg = 0;

    U64 bitboard;
    int sq, mobcount;
    
    // Positional evaluation of the pieces
    U64 open_files = ~fileFill(bitboards[p] | bitboards[P]);
    U64 semiopen_files = ~fileFill(bitboards[P]) | ~fileFill(bitboards[p]);
    bitboard = bitboards[R];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        mobcount = popcount(rookAttacks(sq, occupancies[BOTH]));
        eval_mg += piece_values_mg[R];
        eval_mg += rook_mobility_bonus[MG] * mobcount;
        eval_eg += piece_values_eg[R];
        eval_eg += rook_mobility_bonus[EG] * mobcount;
        white_phase += 5;
        
        if (open_files & fileMasks[sq]) {
            eval_mg += rook_open_file_bonus[MG];
            eval_eg += rook_open_file_bonus[EG];
        } else if (semiopen_files & fileMasks[sq]) {
            eval_mg += rook_semi_open_bonus[MG];
            eval_eg += rook_semi_open_bonus[EG];
        }
        if (sq >= 48 && sq < 56) {
            eval_mg += rook_seventh_bonus[MG];
            eval_eg += rook_seventh_bonus[EG];
        } 
    }
    bitboard = bitboards[r];
        while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        mobcount = popcount(rookAttacks(sq, occupancies[BOTH]));
        eval_mg -= piece_values_mg[R];
        eval_mg -= rook_mobility_bonus[MG] * mobcount;
        eval_eg -= piece_values_eg[R];
        eval_eg -= rook_mobility_bonus[EG] * mobcount;
        black_phase += 5;
        
        if (open_files & fileMasks[sq]) {
            eval_mg -= rook_open_file_bonus[MG];
            eval_eg -= rook_open_file_bonus[EG];
        } else if (semiopen_files & fileMasks[sq]) {
            eval_mg -= rook_semi_open_bonus[MG];
            eval_eg -= rook_semi_open_bonus[EG];
        }
        if (sq >= 8 && sq < 16) {
            eval_mg -= rook_seventh_bonus[MG];
            eval_eg -= rook_seventh_bonus[EG];
        }
        
    }
    bitboard = bitboards[Q];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        mobcount = popcount(queenAttacks(sq, occupancies[BOTH]));
        eval_mg += piece_values_mg[Q];
        //eval_mg += queen_mobility_bonus[MG] * mobcount;
        eval_eg += piece_values_eg[Q];
        //eval_eg += queen_mobility_bonus[EG] * mobcount;
        white_phase += 9;
        eval_mg += queen_pstable[MG][WHITE][sq];
        eval_eg += queen_pstable[EG][WHITE][sq];
    }
    bitboard = bitboards[q];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        mobcount = popcount(queenAttacks(sq, occupancies[BOTH]));
        eval_mg -= piece_values_mg[Q];
        //eval_mg -= queen_mobility_bonus[MG] * mobcount;
        eval_eg -= piece_values_eg[Q];
        //eval_eg -= queen_mobility_bonus[EG] * mobcount;
        black_phase += 9;
        eval_mg -= queen_pstable[MG][BLACK][sq];
        eval_eg -= queen_pstable[EG][BLACK][sq];
    }

    bitboard = bitboards[N];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        eval_mg += piece_values_mg[N];
        eval_eg += piece_values_eg[N];
        white_phase += 3;
        eval_mg += knight_pstable[MG][WHITE][sq];
        eval_eg += knight_pstable[EG][WHITE][sq];
    }
    bitboard = bitboards[n];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        eval_mg -= piece_values_mg[N];
        eval_eg -= piece_values_eg[N];
        black_phase += 3;
        eval_mg -= knight_pstable[MG][BLACK][sq];
        eval_eg -= knight_pstable[EG][BLACK][sq];
    }
    bitboard = bitboards[B];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        mobcount = popcount(bishopAttacks(sq, occupancies[BOTH]));
        eval_mg += piece_values_mg[B];
        eval_mg += bishop_mobility_bonus[MG] * mobcount;
        eval_eg += piece_values_eg[B];
        eval_eg += bishop_mobility_bonus[EG] * mobcount;
        white_phase += 9;
        eval_mg += bishop_pstable[MG][WHITE][sq];
        eval_eg += bishop_pstable[EG][WHITE][sq];
    }
    bitboard = bitboards[b];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        mobcount = popcount(bishopAttacks(sq, occupancies[BOTH]));
        eval_mg -= piece_values_mg[B];
        eval_mg -= bishop_mobility_bonus[MG] * mobcount;
        eval_eg -= piece_values_eg[B];
        eval_eg -= bishop_mobility_bonus[EG] * mobcount;
        black_phase += 9;
        eval_mg -= bishop_pstable[MG][WHITE][sq];
        eval_eg -= bishop_pstable[EG][WHITE][sq];
    }
    // Evaluate king activity and safety based on piece material
    eval_eg += king_pstable[EG][WHITE][bitscanForward(bitboards[K])];
    eval_eg -= king_pstable[EG][BLACK][bitscanForward(bitboards[k])];
    eval_mg += eval_king(WHITE, black_phase, open_files, semiopen_files);
    eval_mg -= eval_king(BLACK, white_phase, open_files, semiopen_files);

    // Evaluate the pawns
    bitboard = bitboards[P];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        eval_mg += piece_values_mg[P];
        eval_eg += piece_values_eg[P];
        eval_mg += pawn_pstable[MG][WHITE][sq];
        eval_eg += pawn_pstable[EG][WHITE][sq];
        white_phase += 1;
        if (!(pawnSpan[WHITE][sq] & bitboards[p])) {
            // Passer
            eval_mg += PASSED_PAWN_BONUS;         //passed_pawn_bonus[MG][WHITE][sq >> 3];
            eval_eg += PASSED_PAWN_BONUS; 
        }
    }
    bitboard = bitboards[p];
    while (bitboard) {
        sq = bitscanForward(bitboard);
        clear_ls1b(bitboard);
        eval_mg -= piece_values_mg[P];
        eval_eg -= piece_values_eg[P];
        eval_mg -= pawn_pstable[MG][BLACK][sq];
        eval_eg -= pawn_pstable[EG][BLACK][sq];
        black_phase += 1;
        if (!(pawnSpan[BLACK][sq] & bitboards[P])) {
            // Passer
            eval_mg -= PASSED_PAWN_BONUS;  
            eval_eg -= PASSED_PAWN_BONUS; 
        }
    }
    // Doubled, isolated, backwards
    int count;

    count = count_isolated_pawns(bitboards[P]);
    eval_mg -= isolated_pawn_penalty[MG] * count;
    eval_eg -= isolated_pawn_penalty[EG] * count;

    count = count_isolated_pawns(bitboards[p]);
    eval_mg += isolated_pawn_penalty[MG] * count;
    eval_eg += isolated_pawn_penalty[EG] * count;

    count = count_doubled_pawns(bitboards[P]);
    eval_mg -= doubled_pawn_penalty[MG] * count;
    eval_eg -= doubled_pawn_penalty[EG] * count;

    count = count_doubled_pawns(bitboards[p]);
    eval_mg += doubled_pawn_penalty[MG] * count;
    eval_eg += doubled_pawn_penalty[EG] * count;

    count = count_white_backward_pawns(bitboards[P]);
    eval_mg -= backward_pawn_penalty[MG] * count;
    eval_eg -= backward_pawn_penalty[EG] * count;

    count = count_black_backward_pawns(bitboards[p]);
    eval_mg += backward_pawn_penalty[MG] * count;
    eval_eg += backward_pawn_penalty[EG] * count;

    // Undeveloped penalty
    eval_mg -= popcount((bitboards[N] | bitboards[B]) & firstRank) * UNDEVELOPED_PIECE_PENALTY;
    eval_mg += popcount((bitboards[n] | bitboards[b]) & lastRank) * UNDEVELOPED_PIECE_PENALTY;

    // No pawns penalty
    if (!bitboards[P])
        eval_eg -= NO_PAWNS_PENALTY;
    if (!bitboards[p])
        eval_eg += NO_PAWNS_PENALTY;
    
    int total_phase = white_phase + black_phase;
    int score;

    if (total_phase > 60) {
        score = eval_mg;
    } else if (total_phase <= 60 && total_phase >= 20) {
        score = (eval_mg * (total_phase - 20) + eval_eg * (60 - total_phase)) / 40;
    } else {
        score = eval_eg;
    }

    return side_to_move ? -score : score;
}

// Static exchange evaluation

// Gets the smallest value attacker
static inline U64 get_smallest_attacker(int sq, int side) {
    U64 attackers;
    U64 bb = (U64)1 << sq;
    attackers = pawn_attack_table[1 ^ side][sq] & bitboards[P + 6*side];
    if (attackers) return (attackers & -attackers);
    attackers = knight_attack_table[sq] & bitboards[N + 6*side];
    if (attackers) return (attackers & -attackers);
    attackers = bishopAttacks(sq, occupancies[BOTH]) & bitboards[B + 6 * side];
    if (attackers) return (attackers & -attackers);
    attackers = rookAttacks(sq, occupancies[BOTH]) & bitboards[R + 6 * side];
    if (attackers) return (attackers & -attackers);
    attackers = queenAttacks(sq, occupancies[BOTH]) & bitboards[Q + 6 * side];
    if (attackers) return (attackers & -attackers);
    attackers = king_attack_table[sq] & bitboards[K + 6*side];
    if (attackers) return (attackers & -attackers);
    return C64(0);
}

static inline int make_see_capture(U64 attacker, int sq) {
    int source = bitscanForward(attacker);
    int captured = piece_on_square[sq];
    int piece = piece_on_square[source];
    U64 from_to_bb = ((U64)1 << sq) | attacker;
    bitboards[captured] ^= ((U64)1 << sq);
    bitboards[piece] ^= from_to_bb;
    occupancies[BOTH] ^= attacker;
    piece_on_square[source] = EMPTY;
    piece_on_square[sq] = piece;
    // Weird return type: Return the captured piece in the lower 4 bits, source in the next
    return captured | (source << 4);
}

static inline void unmake_see_capture(int captured, int sq, int source) {
    int capturer = piece_on_square[sq];
    U64 from_to_bb = ((U64)1 << sq) | ((U64)1 << source);
    bitboards[captured] ^= ((U64)1 << sq);
    bitboards[capturer] ^= from_to_bb;
    occupancies[BOTH] ^= ((U64)1 << source);
    piece_on_square[source] = capturer;
    piece_on_square[sq] = captured;
}

// Static exchange evaluation
int SEE(int square, int side) {
    int score = 0;
    U64 attacker = get_smallest_attacker(square, side);
    if (attacker) {
        int capsrc;
        capsrc = make_see_capture(attacker, square);
        //captured = capsrc & 0xF;
        //source = capsrc >> 4;
        // Don't consider a capture if it loses material
        score = simple_piece_values[(capsrc & 0xF) % 6] - SEE(square, 1 ^ side);
        score = (score > 0) ? score : 0;
        unmake_see_capture((capsrc & 0xF),square,(capsrc >> 4));
    }
    return score;
}

// SEE a capture move
// E.G. if the move is QxP (+1), and the SEE determines that the static exchange result is a +9 for the other side, via PxQ, returns -8
int SEE_capture(int source, int target, int side) {
    int score, capsrc;
    int piece = piece_on_square[source];
    capsrc = make_see_capture((U64)1 << source, target);
    score = simple_piece_values[(capsrc & 0xF) % 6] - SEE(target, 1 ^ side);
    unmake_see_capture((capsrc & 0xF),target,(capsrc >> 4));
    return score;
}